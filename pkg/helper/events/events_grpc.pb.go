// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventCollectorClient is the client API for EventCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventCollectorClient interface {
	NFTCollection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventCollector_NFTCollectionClient, error)
	NFTTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventCollector_NFTTransferClient, error)
}

type eventCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewEventCollectorClient(cc grpc.ClientConnInterface) EventCollectorClient {
	return &eventCollectorClient{cc}
}

func (c *eventCollectorClient) NFTCollection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventCollector_NFTCollectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventCollector_ServiceDesc.Streams[0], "/rpc.EventCollector/NFTCollection", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventCollectorNFTCollectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventCollector_NFTCollectionClient interface {
	Recv() (*CollectionCreated, error)
	grpc.ClientStream
}

type eventCollectorNFTCollectionClient struct {
	grpc.ClientStream
}

func (x *eventCollectorNFTCollectionClient) Recv() (*CollectionCreated, error) {
	m := new(CollectionCreated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventCollectorClient) NFTTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventCollector_NFTTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventCollector_ServiceDesc.Streams[1], "/rpc.EventCollector/NFTTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventCollectorNFTTransferClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventCollector_NFTTransferClient interface {
	Recv() (*NFTTransaction, error)
	grpc.ClientStream
}

type eventCollectorNFTTransferClient struct {
	grpc.ClientStream
}

func (x *eventCollectorNFTTransferClient) Recv() (*NFTTransaction, error) {
	m := new(NFTTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventCollectorServer is the server API for EventCollector service.
// All implementations must embed UnimplementedEventCollectorServer
// for forward compatibility
type EventCollectorServer interface {
	NFTCollection(*emptypb.Empty, EventCollector_NFTCollectionServer) error
	NFTTransfer(*emptypb.Empty, EventCollector_NFTTransferServer) error
	mustEmbedUnimplementedEventCollectorServer()
}

// UnimplementedEventCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedEventCollectorServer struct {
}

func (UnimplementedEventCollectorServer) NFTCollection(*emptypb.Empty, EventCollector_NFTCollectionServer) error {
	return status.Errorf(codes.Unimplemented, "method NFTCollection not implemented")
}
func (UnimplementedEventCollectorServer) NFTTransfer(*emptypb.Empty, EventCollector_NFTTransferServer) error {
	return status.Errorf(codes.Unimplemented, "method NFTTransfer not implemented")
}
func (UnimplementedEventCollectorServer) mustEmbedUnimplementedEventCollectorServer() {}

// UnsafeEventCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventCollectorServer will
// result in compilation errors.
type UnsafeEventCollectorServer interface {
	mustEmbedUnimplementedEventCollectorServer()
}

func RegisterEventCollectorServer(s grpc.ServiceRegistrar, srv EventCollectorServer) {
	s.RegisterService(&EventCollector_ServiceDesc, srv)
}

func _EventCollector_NFTCollection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventCollectorServer).NFTCollection(m, &eventCollectorNFTCollectionServer{stream})
}

type EventCollector_NFTCollectionServer interface {
	Send(*CollectionCreated) error
	grpc.ServerStream
}

type eventCollectorNFTCollectionServer struct {
	grpc.ServerStream
}

func (x *eventCollectorNFTCollectionServer) Send(m *CollectionCreated) error {
	return x.ServerStream.SendMsg(m)
}

func _EventCollector_NFTTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventCollectorServer).NFTTransfer(m, &eventCollectorNFTTransferServer{stream})
}

type EventCollector_NFTTransferServer interface {
	Send(*NFTTransaction) error
	grpc.ServerStream
}

type eventCollectorNFTTransferServer struct {
	grpc.ServerStream
}

func (x *eventCollectorNFTTransferServer) Send(m *NFTTransaction) error {
	return x.ServerStream.SendMsg(m)
}

// EventCollector_ServiceDesc is the grpc.ServiceDesc for EventCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.EventCollector",
	HandlerType: (*EventCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NFTCollection",
			Handler:       _EventCollector_NFTCollection_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NFTTransfer",
			Handler:       _EventCollector_NFTTransfer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}
